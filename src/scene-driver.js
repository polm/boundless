// Generated by LiveScript 1.4.0
(function(){
  var ref$, R, remove, contains, shuffle, fail, sceneIsValid, SceneDriver, out$ = typeof exports != 'undefined' && exports || this;
  ref$ = require('./utils'), R = ref$.R, remove = ref$.remove, contains = ref$.contains, shuffle = ref$.shuffle;
  fail = function(it){
    throw {
      name: "Scene Condition Failure",
      message: "Failed " + it + " check"
    };
  };
  sceneIsValid = function(scene, game){
    if (scene.used) {
      return false;
    }
    if (!scene.condition) {
      return true;
    }
    return scene.condition(game);
  };
  out$.SceneDriver = SceneDriver = (function(){
    SceneDriver.displayName = 'SceneDriver';
    var prototype = SceneDriver.prototype, constructor = SceneDriver;
    function SceneDriver(log){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.log = log;
      this$.playScene = bind$(this$, 'playScene', prototype);
      this$.addScenes = bind$(this$, 'addScenes', prototype);
      this$.scenes = [];
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.addScenes = function(it){
      var i$, len$, scene, j$, ref$, len1$, hook, results$ = [];
      for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
        scene = it[i$];
        for (j$ = 0, len1$ = (ref$ = ['say', 'choose', 'img', 'delay']).length; j$ < len1$; ++j$) {
          hook = ref$[j$];
          scene[hook] = this.log[hook];
        }
        results$.push(this.scenes.push(scene));
      }
      return results$;
    };
    prototype.playScene = function(game){
      var i$, ref$, len$, scene, this$ = this;
      for (i$ = 0, len$ = (ref$ = shuffle(this.scenes)).length; i$ < len$; ++i$) {
        scene = ref$[i$];
        if (sceneIsValid(scene, game)) {
          scene.script(game);
          scene.used = true;
          this.log.start(fn$);
          return true;
        }
      }
      console.error("no valid scene found!");
      return false;
      function fn$(){
        return this$.playScene(game);
      }
    };
    return SceneDriver;
  }());
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
