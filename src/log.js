// Generated by LiveScript 1.4.0
(function(){
  var scrollBottom, getDiv, Log, out$ = typeof exports != 'undefined' && exports || this;
  scrollBottom = require('./utils').scrollBottom;
  getDiv = function(){
    return document.createElement('div');
  };
  out$.Log = Log = (function(){
    Log.displayName = 'Log';
    var prototype = Log.prototype, constructor = Log;
    function Log(div){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.div = div;
      this$.choose = bind$(this$, 'choose', prototype);
      this$.delay = bind$(this$, 'delay', prototype);
      this$.img = bind$(this$, 'img', prototype);
      this$.say = bind$(this$, 'say', prototype);
      this$.cancelOnclicks = bind$(this$, 'cancelOnclicks', prototype);
      this$.start = bind$(this$, 'start', prototype);
      this$.step = bind$(this$, 'step', prototype);
      this$.q = [];
      this$.choices = [];
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.step = function(){
      this.cancelOnclicks();
      if (this.q.length === 0) {
        return typeof this.callback == 'function' ? this.callback() : void 8;
      }
      this.q.shift()();
      return scrollBottom();
    };
    prototype.start = function(callback){
      this.callback = callback;
      return this.step();
    };
    prototype.cancelOnclicks = function(){
      var nodes, i$, len$, node, results$ = [];
      nodes = this.div.querySelectorAll('.message');
      for (i$ = 0, len$ = nodes.length; i$ < len$; ++i$) {
        node = nodes[i$];
        results$.push(node.onclick = null);
      }
      return results$;
    };
    prototype.say = function(actor, words, extraClass){
      var this$ = this;
      extraClass == null && (extraClass = null);
      return this.q.push(function(){
        var message;
        message = getDiv();
        message.className = 'message';
        message.innerHTML = words;
        message.onclick = this$.step;
        if (actor) {
          message.style["background-image"] = "url(avatars/" + actor + ".jpg)";
        }
        if (extraClass) {
          message.className += " " + extraClass;
        }
        return this$.div.appendChild(message);
      });
    };
    prototype.img = function(actor, imgName){
      return this.say(actor, "<img src=\"img/" + imgName + ".jpg\"></img>", 'img');
    };
    prototype.delay = function(wait){
      var this$ = this;
      wait == null && (wait = 1000);
      return this.q.push(function(){
        return setTimeout(this$.step, wait);
      });
    };
    prototype.choose = function(label, words, followup){
      var ss, wrappedFollowup, this$ = this;
      ss = this.step;
      wrappedFollowup = function(){
        followup(label);
        this.className += " chosen";
        return ss();
      };
      this.choices.push({
        label: label,
        words: words,
        followup: wrappedFollowup
      });
      return this.q.push(function(){
        var i$, ref$, len$, choice, cdiv;
        this$.q = [];
        for (i$ = 0, len$ = (ref$ = this$.choices).length; i$ < len$; ++i$) {
          choice = ref$[i$];
          cdiv = getDiv();
          cdiv.className = "message choice";
          cdiv.innerHTML = choice.words;
          cdiv.onclick = choice.followup;
          this$.div.appendChild(cdiv);
        }
        return this$.choices = [];
      });
    };
    return Log;
  }());
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
